import { Aggregators, AirtableInterface } from '../../src/types/airtable_interface';
import { ModelChange } from '../../src/types/base';
import { Mutation, PermissionCheckResult } from '../../src/types/mutations';
declare const EventEmitter: any;
declare class MockAirtableInterface extends EventEmitter implements AirtableInterface {
    aggregators: Aggregators;
    fieldTypeProvider: any;
    sdkInitData: any;
    urlConstructor: any;
    globalConfigHelpers: any;
    setMultipleKvPathsAsync: any;
    unsubscribeFromTableData: any;
    fetchAndSubscribeToCellValuesInFieldsAsync: any;
    unsubscribeFromCellValuesInFields: any;
    setCellValuesAsync: any;
    deleteRecordsAsync: any;
    createRecordsAsync: any;
    fetchAndSubscribeToViewDataAsync: any;
    unsubscribeFromViewData: any;
    fetchDefaultCellValuesByFieldIdAsync: any;
    fetchAndSubscribeToCursorDataAsync: any;
    unsubscribeFromCursorData: any;
    expandRecord: any;
    expandRecordList: any;
    expandRecordPickerAsync: any;
    reloadFrame: any;
    setSettingsButtonVisibility: any;
    setUndoRedoMode: any;
    setFullscreenMaxSize: any;
    enterFullscreen: any;
    exitFullscreen: any;
    createVisList: any;
    setActiveViewOrTable: any;
    fetchAndSubscribeToPerformRecordActionAsync: any;
    trackEvent: any;
    sendStat: any;
    constructor(initData: any);
    static projectTrackerExample(): MockAirtableInterface;
    reset(): void;
    assertAllowedSdkPackageVersion(): void;
    applyMutationAsync(mutation: Mutation, opts?: {
        holdForMs?: number;
    }): Promise<void>;
    checkPermissionsForMutation(mutation: Mutation): PermissionCheckResult;
    subscribeToModelUpdates(fn: Function): void;
    subscribeToGlobalConfigUpdates(): void;
    subscribeToSettingsButtonClick(): void;
    subscribeToEnterFullScreen(): void;
    subscribeToExitFullScreen(): void;
    subscribeToFocus(): void;
    fetchAndSubscribeToTableDataAsync(tableId: string): Promise<any>;
    triggerModelUpdates(changes: ReadonlyArray<ModelChange>): void;
    triggerGlobalConfigUpdates(): void;
    triggerSettingsButtonClick(): void;
    triggerEnterFullScreen(): void;
    triggerExitFullScreen(): void;
    triggerFocus(): void;
    get idGenerator(): {
        generateRecordId: () => string;
        generateFieldId: () => string;
        generateTableId: () => string;
    };
}
export default MockAirtableInterface;
//# sourceMappingURL=mock_airtable_interface.d.ts.map